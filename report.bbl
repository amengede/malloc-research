\begin{thebibliography}{10}

\bibitem{allignment}
Data structure alignment.
\newblock \url{https://en.wikipedia.org/wiki/Data_structure_alignment}, 2024.
\newblock [accessed 02-11-24].

\bibitem{analytical}
Sarah Baldwin.
\newblock Ada lovelace and the analytical engine.
\newblock
  \url{https://blogs.bodleian.ox.ac.uk/adalovelace/2018/07/26/ada-lovelace-and-the-analytical-engine/},
  2018.
\newblock [accessed 28-10-24].

\bibitem{ibmDeveloper}
Jonathan Bartlett.
\newblock Ibm developer --- developer.ibm.com.
\newblock \url{https://developer.ibm.com/tutorials/l-memory/}, 2004.
\newblock [Accessed 10-09-2024].

\bibitem{10.5555/202036}
Michael~C. Daconta.
\newblock {\em C++ pointers and dynamic memory management}.
\newblock Wiley-QED Publishing, USA, 1995.

\bibitem{10.1002/spe.4380240602}
David Detlefs, Al~Dosser, and Benjamin Zorn.
\newblock Memory allocation costs in large c and c++ programs.
\newblock {\em Softw. Pract. Exper.}, 24(6):527–542, jun 1994.

\bibitem{10.5555/2621961}
Jason Gregory.
\newblock {\em Game Engine Architecture, Second Edition}.
\newblock A. K. Peters, Ltd., USA, 2nd edition, 2014.

\bibitem{10.1145/173262.155107}
Dirk Grunwald, Benjamin Zorn, and Robert Henderson.
\newblock Improving the cache locality of memory allocation.
\newblock {\em SIGPLAN Not.}, 28(6):177–186, jun 1993.

\bibitem{10.1145/301589.286864}
Mark~S. Johnstone and Paul~R. Wilson.
\newblock The memory fragmentation problem: solved?
\newblock {\em SIGPLAN Not.}, 34(3):26–36, oct 1998.

\bibitem{10.5555/2025255}
Richard Jones, Antony Hosking, and Eliot Moss.
\newblock {\em The Garbage Collection Handbook: The Art of Automatic Memory
  Management}.
\newblock Chapman \& Hall/CRC, 1st edition, 2011.

\bibitem{ibmMainframes}
Stephen Kaisler.
\newblock {\em Second Generation Mainframes: The IBM 7000 Series}.
\newblock 06 2019.

\bibitem{knuth97}
Donald~E. Knuth.
\newblock {\em The Art of Computer Programming, Vol. 1: Fundamental
  Algorithms}.
\newblock Addison-Wesley, Reading, Mass., third edition, 1997.

\bibitem{accessTime}
Bharat~Kumar Makhija.
\newblock Learn how to elevate your system's performance with multi-level
  caching.
\newblock
  \url{https://medium.com/@bharatmakhija/learn-how-to-elevate-your-systems-performance-with-multi-level-caching-511efb774a6e},
  2023.
\newblock [accessed 28-10-24].

\bibitem{inproceedings}
M.~Masmano, I.~Ripoll, Alfons Crespo, and Jorge Real.
\newblock Tlsf: A new dynamic memory allocator for real-time systems.
\newblock volume~16, pages 79-- 88, 01 2004.

\bibitem{matani2021fastbitmapfitcpu}
Dhruv Matani and Gaurav Menghani.
\newblock Fast bitmap fit: A cpu cache line friendly memory allocator for
  single object allocations, 2021.

\bibitem{528746}
T.~Ogasawara.
\newblock An algorithm with constant execution time for dynamic storage
  allocation.
\newblock In {\em Proceedings Second International Workshop on Real-Time
  Computing Systems and Applications}, pages 21--25, 1995.

\bibitem{TLSF-implementation}
Mindaugas Rasiukevicius.
\newblock Tlsf: two-level segregated fit o(1) allocator.
\newblock \url{https://github.com/rmind/tlsf/tree/master}, 2022.
\newblock [accessed 12-10-24].

\bibitem{10.1145/3828.3835}
Daniel~Dominic Sleator and Robert~Endre Tarjan.
\newblock Self-adjusting binary search trees.
\newblock {\em J. ACM}, 32(3):652–686, jul 1985.

\bibitem{doom3-malloc}
Forest Smith.
\newblock Benchmarking malloc with doom 3.
\newblock
  \url{https://www.forrestthewoods.com/blog/benchmarking-malloc-with-doom3/},
  2022.
\newblock [accessed 01-08-24].

\bibitem{10.1145/800217.806613}
C.~J. Stephenson.
\newblock New methods for dynamic storage allocation (fast fits).
\newblock In {\em Proceedings of the Ninth ACM Symposium on Operating Systems
  Principles}, SOSP '83, page 30–32, New York, NY, USA, 1983. Association for
  Computing Machinery.

\bibitem{free-list-implementation}
Mariano Trebino.
\newblock memory-allocators.
\newblock \url{https://github.com/mtrebi/memory-allocators/tree/master}, 2020.
\newblock [accessed 14-10-24].

\bibitem{10.1145/358841.358852}
Jean Vuillemin.
\newblock A unifying look at data structures.
\newblock {\em Commun. ACM}, 23(4):229–239, apr 1980.

\bibitem{stackFrame}
Jun Zhang.
\newblock Stack frame and related operations.
\newblock
  \url{https://www.researchgate.net/figure/Stack-frame-and-related-operations_fig1_329007575},
  2018.
\newblock [accessed 30-10-24].

\end{thebibliography}
